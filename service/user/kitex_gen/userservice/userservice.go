// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"ihome/service/user/kitex_gen"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*kitex_gen.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendSMS":  kitex.NewMethodInfo(sendSMSHandler, newSendSMSArgs, newSendSMSResult, false),
		"Register": kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func sendSMSHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.SMSRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.UserService).SendSMS(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendSMSArgs:
		success, err := handler.(kitex_gen.UserService).SendSMS(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendSMSResult)
		realResult.Success = success
	}
	return nil
}
func newSendSMSArgs() interface{} {
	return &SendSMSArgs{}
}

func newSendSMSResult() interface{} {
	return &SendSMSResult{}
}

type SendSMSArgs struct {
	Req *kitex_gen.SMSRequest
}

func (p *SendSMSArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendSMSArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendSMSArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.SMSRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendSMSArgs_Req_DEFAULT *kitex_gen.SMSRequest

func (p *SendSMSArgs) GetReq() *kitex_gen.SMSRequest {
	if !p.IsSetReq() {
		return SendSMSArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendSMSArgs) IsSetReq() bool {
	return p.Req != nil
}

type SendSMSResult struct {
	Success *kitex_gen.Response
}

var SendSMSResult_Success_DEFAULT *kitex_gen.Response

func (p *SendSMSResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendSMSResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendSMSResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendSMSResult) GetSuccess() *kitex_gen.Response {
	if !p.IsSetSuccess() {
		return SendSMSResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendSMSResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.Response)
}

func (p *SendSMSResult) IsSetSuccess() bool {
	return p.Success != nil
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.RegRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.UserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(kitex_gen.UserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *kitex_gen.RegRequest
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.RegRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *kitex_gen.RegRequest

func (p *RegisterArgs) GetReq() *kitex_gen.RegRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterResult struct {
	Success *kitex_gen.Response
}

var RegisterResult_Success_DEFAULT *kitex_gen.Response

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *kitex_gen.Response {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.Response)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendSMS(ctx context.Context, Req *kitex_gen.SMSRequest) (r *kitex_gen.Response, err error) {
	var _args SendSMSArgs
	_args.Req = Req
	var _result SendSMSResult
	if err = p.c.Call(ctx, "SendSMS", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Register(ctx context.Context, Req *kitex_gen.RegRequest) (r *kitex_gen.Response, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
