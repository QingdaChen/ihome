// Code generated by Kitex v0.3.2. DO NOT EDIT.

package houseservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"ihome/service/house/kitex_gen"
)

func serviceInfo() *kitex.ServiceInfo {
	return houseServiceServiceInfo
}

var houseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "HouseService"
	handlerType := (*kitex_gen.HouseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetArea":      kitex.NewMethodInfo(getAreaHandler, newGetAreaArgs, newGetAreaResult, false),
		"PubHouse":     kitex.NewMethodInfo(pubHouseHandler, newPubHouseArgs, newPubHouseResult, false),
		"GetUserHouse": kitex.NewMethodInfo(getUserHouseHandler, newGetUserHouseArgs, newGetUserHouseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "house",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func getAreaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.AreaRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.HouseService).GetArea(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAreaArgs:
		success, err := handler.(kitex_gen.HouseService).GetArea(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAreaResult)
		realResult.Success = success
	}
	return nil
}
func newGetAreaArgs() interface{} {
	return &GetAreaArgs{}
}

func newGetAreaResult() interface{} {
	return &GetAreaResult{}
}

type GetAreaArgs struct {
	Req *kitex_gen.AreaRequest
}

func (p *GetAreaArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAreaArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAreaArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.AreaRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAreaArgs_Req_DEFAULT *kitex_gen.AreaRequest

func (p *GetAreaArgs) GetReq() *kitex_gen.AreaRequest {
	if !p.IsSetReq() {
		return GetAreaArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAreaArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetAreaResult struct {
	Success *kitex_gen.Response
}

var GetAreaResult_Success_DEFAULT *kitex_gen.Response

func (p *GetAreaResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAreaResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAreaResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAreaResult) GetSuccess() *kitex_gen.Response {
	if !p.IsSetSuccess() {
		return GetAreaResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAreaResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.Response)
}

func (p *GetAreaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func pubHouseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.PubHouseRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.HouseService).PubHouse(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PubHouseArgs:
		success, err := handler.(kitex_gen.HouseService).PubHouse(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PubHouseResult)
		realResult.Success = success
	}
	return nil
}
func newPubHouseArgs() interface{} {
	return &PubHouseArgs{}
}

func newPubHouseResult() interface{} {
	return &PubHouseResult{}
}

type PubHouseArgs struct {
	Req *kitex_gen.PubHouseRequest
}

func (p *PubHouseArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PubHouseArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PubHouseArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.PubHouseRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PubHouseArgs_Req_DEFAULT *kitex_gen.PubHouseRequest

func (p *PubHouseArgs) GetReq() *kitex_gen.PubHouseRequest {
	if !p.IsSetReq() {
		return PubHouseArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PubHouseArgs) IsSetReq() bool {
	return p.Req != nil
}

type PubHouseResult struct {
	Success *kitex_gen.Response
}

var PubHouseResult_Success_DEFAULT *kitex_gen.Response

func (p *PubHouseResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PubHouseResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PubHouseResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PubHouseResult) GetSuccess() *kitex_gen.Response {
	if !p.IsSetSuccess() {
		return PubHouseResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PubHouseResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.Response)
}

func (p *PubHouseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserHouseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.GetUserHouseRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.HouseService).GetUserHouse(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserHouseArgs:
		success, err := handler.(kitex_gen.HouseService).GetUserHouse(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserHouseResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserHouseArgs() interface{} {
	return &GetUserHouseArgs{}
}

func newGetUserHouseResult() interface{} {
	return &GetUserHouseResult{}
}

type GetUserHouseArgs struct {
	Req *kitex_gen.GetUserHouseRequest
}

func (p *GetUserHouseArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserHouseArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserHouseArgs) Unmarshal(in []byte) error {
	msg := new(kitex_gen.GetUserHouseRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserHouseArgs_Req_DEFAULT *kitex_gen.GetUserHouseRequest

func (p *GetUserHouseArgs) GetReq() *kitex_gen.GetUserHouseRequest {
	if !p.IsSetReq() {
		return GetUserHouseArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserHouseArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserHouseResult struct {
	Success *kitex_gen.Response
}

var GetUserHouseResult_Success_DEFAULT *kitex_gen.Response

func (p *GetUserHouseResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserHouseResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserHouseResult) Unmarshal(in []byte) error {
	msg := new(kitex_gen.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserHouseResult) GetSuccess() *kitex_gen.Response {
	if !p.IsSetSuccess() {
		return GetUserHouseResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserHouseResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.Response)
}

func (p *GetUserHouseResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetArea(ctx context.Context, Req *kitex_gen.AreaRequest) (r *kitex_gen.Response, err error) {
	var _args GetAreaArgs
	_args.Req = Req
	var _result GetAreaResult
	if err = p.c.Call(ctx, "GetArea", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PubHouse(ctx context.Context, Req *kitex_gen.PubHouseRequest) (r *kitex_gen.Response, err error) {
	var _args PubHouseArgs
	_args.Req = Req
	var _result PubHouseResult
	if err = p.c.Call(ctx, "PubHouse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserHouse(ctx context.Context, Req *kitex_gen.GetUserHouseRequest) (r *kitex_gen.Response, err error) {
	var _args GetUserHouseArgs
	_args.Req = Req
	var _result GetUserHouseResult
	if err = p.c.Call(ctx, "GetUserHouse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
