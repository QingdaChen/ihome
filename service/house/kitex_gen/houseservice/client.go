// Code generated by Kitex v0.3.2. DO NOT EDIT.

package houseservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"ihome/service/house/kitex_gen"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetArea(ctx context.Context, Req *kitex_gen.AreaRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
	PubHouse(ctx context.Context, Req *kitex_gen.PubHouseRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
	GetUserHouse(ctx context.Context, Req *kitex_gen.GetUserHouseRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
	UploadHouseImg(ctx context.Context, Req *kitex_gen.UploadHouseImgReq, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
	GetHouseDetail(ctx context.Context, Req *kitex_gen.GetHouseDetailReg, callOptions ...callopt.Option) (r *kitex_gen.HouseDetailResp, err error)
	SearchHouse(ctx context.Context, Req *kitex_gen.HouseSearchReq, callOptions ...callopt.Option) (r *kitex_gen.HouseSearchResp, err error)
	HouseHomeIndex(ctx context.Context, Req *kitex_gen.HouseHomeIndexReg, callOptions ...callopt.Option) (r *kitex_gen.HouseSearchResp, err error)
	GetHouseInfo(ctx context.Context, Req *kitex_gen.GetHouseInfoReq, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kHouseServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kHouseServiceClient struct {
	*kClient
}

func (p *kHouseServiceClient) GetArea(ctx context.Context, Req *kitex_gen.AreaRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArea(ctx, Req)
}

func (p *kHouseServiceClient) PubHouse(ctx context.Context, Req *kitex_gen.PubHouseRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PubHouse(ctx, Req)
}

func (p *kHouseServiceClient) GetUserHouse(ctx context.Context, Req *kitex_gen.GetUserHouseRequest, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserHouse(ctx, Req)
}

func (p *kHouseServiceClient) UploadHouseImg(ctx context.Context, Req *kitex_gen.UploadHouseImgReq, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadHouseImg(ctx, Req)
}

func (p *kHouseServiceClient) GetHouseDetail(ctx context.Context, Req *kitex_gen.GetHouseDetailReg, callOptions ...callopt.Option) (r *kitex_gen.HouseDetailResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHouseDetail(ctx, Req)
}

func (p *kHouseServiceClient) SearchHouse(ctx context.Context, Req *kitex_gen.HouseSearchReq, callOptions ...callopt.Option) (r *kitex_gen.HouseSearchResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchHouse(ctx, Req)
}

func (p *kHouseServiceClient) HouseHomeIndex(ctx context.Context, Req *kitex_gen.HouseHomeIndexReg, callOptions ...callopt.Option) (r *kitex_gen.HouseSearchResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HouseHomeIndex(ctx, Req)
}

func (p *kHouseServiceClient) GetHouseInfo(ctx context.Context, Req *kitex_gen.GetHouseInfoReq, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHouseInfo(ctx, Req)
}
